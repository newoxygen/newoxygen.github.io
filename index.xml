<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>氧气计算</title>
    <link>http://newoxygen.github.io/</link>
    <description>Recent content on 氧气计算</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2015 19:09:53 +0800</lastBuildDate>
    <atom:link href="http://newoxygen.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>flask安装小结</title>
      <link>http://newoxygen.github.io/post/flask%E5%AE%89%E8%A3%85%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Thu, 03 Dec 2015 19:09:53 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/flask%E5%AE%89%E8%A3%85%E5%B0%8F%E7%BB%93/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;flask是一个微型的python web框架，他基于Werkzeug和Jinja2，提供了一个包含基础服务
的强健核心，数据库访问、web表单验证和用户认证等高级功能则需要安装额外的扩展来支
持。学过一段时间flask后回过头来总结一下如何在Windows和Linux下安装flask。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;linux下安装flask:abffa364279d81f534aa98a2cc79ce6e&#34;&gt;Linux下安装flask&lt;/h2&gt;

&lt;p&gt;很简单，我使用的是Ubuntu 14.04_amd64的系统，默认的python是2.7.6，所以不用安装
python了，首先输入下列命令安装virtualenv（新系统默认未安装）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装成功后可以输入&lt;code&gt;virtualenv --version&lt;/code&gt;命令验证，正常的话应该显示virtualenv的版
本号。然后新建一个本地调试用的文件夹，并创建本地虚拟环境：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
sudo mkdir flask_site
cd flask_site
virtualenv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本地虚拟环境venv创建成功后会自动安装pip，在flask_site目录下输入
&lt;code&gt;. venv\bin\activate&lt;/code&gt;即可启动本地虚拟环境，命令行提示符变为(venv)$，保持本地虚拟
环境开启状态，这样就可以在本地虚拟环境中通过pip安装flask了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install flask
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有时能够正常下载安装，有时则会由于一些众所周知的原因无法访问pipy，这样的话我们就
得需要换一个国内的pipy镜像，需要按照如下格式修改&lt;code&gt;/home/.pip/pip.conf&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[global]
index-url =  http://mirrors.aliyun.com/pypi/simple/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得注意的是，&lt;code&gt;.pip&lt;/code&gt;文件夹是隐藏的，所以在图形界面下默认是看不见的，需要在上面菜
单中设置&lt;code&gt;显示隐藏的文件&lt;/code&gt;，或者直接命令行里编辑好保存即可。另外国内的镜像有很多，
有时候也可能存在长期没人维护挂掉的情况，换一个就可以了。
为了验证flask是否安装成功，可以命令行输入&lt;code&gt;python&lt;/code&gt;进入python交互模式，
输入&lt;code&gt;import flask&lt;/code&gt;（注意，这些操作也都是在本地虚拟环境开启的情况下进行的）后如果
没有告警就说明flask安装成功了，如果要退出本地虚拟环境，可以在linux终端里输入
&lt;code&gt;deactivate&lt;/code&gt;即可。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：virtualenv用于创建一个独立封闭的Python虚拟环境，你可以在这个环境中安装
私有包，而不会影响系统中的全局Python环境和其他虚拟环境，避免包的混乱和版本的冲突。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;windows下安装flask:abffa364279d81f534aa98a2cc79ce6e&#34;&gt;Windows下安装flask&lt;/h2&gt;

&lt;p&gt;Windows下需要先到Python官网上下载一个安装文件安装Python，我使用的是Python2.7.10，
安装完成后需要把以下内容加入到环境变量Path中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;C:\Python27;C:\Python27\Scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;环境变量设置位置：我的电脑右键属性-高级系统设置-环境变量-点击Path编辑，分号是必
须的。&lt;/p&gt;

&lt;p&gt;设置好环境变量后，我们可以使用easy_install安装pip，然后利用pip安装virtualenv：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;easy_install pip
pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样可以使用前面在Linux下的验证方法验证virtualenv是否安装成功，接着创建一个本地
的虚拟环境（命令和linux一样），只是启动方式不一样，&lt;code&gt;venv\Scripts\activate&lt;/code&gt;，正
常启动后pip安装flask，然后在Python交互模式下验证，退出虚拟环境也是在命令行下输入
&lt;code&gt;deactivate&lt;/code&gt;。enjoy flask and python!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>转-如何写好一篇好的技术博客</title>
      <link>http://newoxygen.github.io/post/%E8%BD%AC-%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E5%A5%BD%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 24 Nov 2015 14:40:48 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/%E8%BD%AC-%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E7%AF%87%E5%A5%BD%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&#34;http://rock3.info/blog/2013/11/26/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E7%AF%87%E5%A5%BD%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/&#34;&gt;Rock3的Linux博客&lt;/a&gt;，挺早的一个博文了，最近自己写博客之后才关注到，我觉得写的很好，有借鉴的意义，我这里只做了适当排版和修正，另外建议大家看这篇博客的同时看一下知乎上的一个回答：[你有什么相见恨晚的知识想推荐给年轻人？][2]里面采铜的“四象限图”答案，了解什么是长半衰期，这样你就知道你应该写什么样的博客，看什么样的博客了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在工作过程中，发现对很多东西都一知半解，不是很透彻，到头来很容易模糊，如果有一篇好的技术博客予以总结，一来即使忘记了，回过头来再看，仍然能够从自己的思路中恢复；二来总结一下，还会发现一些潜在问题；三来，有利于大家交流技术。很多大公司都有自己的内部技术博客平台，写好自己的技术博客，对一个技术人员来说，也有一定的成就感。在网上查阅资料，经常可以看到一些技术博客，要么废话连篇、排版紊乱，要么代码占了篇幅的60%，有些甚至是错的，会让人产生误解。因此，在这总结一下一篇好的技术博客应该是怎样的，同时也规整自己的不良习惯。本篇博客纯属个人的一点想法，是个原则性的东西，切忌逐条对号入座啊。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本篇博客耗时2小时。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-带着明确的目的写博客:d620bc02c2e972e3f98edfd9f5850d6a&#34;&gt;一、带着明确的目的写博客&lt;/h2&gt;

&lt;p&gt;经常看到这种博客，为了写博客而写博客。比如一篇介绍socket接口的使用方法的博客，罗列了一堆代码，凑上几句话：“首先&amp;hellip;，其次&amp;hellip;，最后&amp;hellip;”，就算OK。如果你的目的是“练习如何使用写博客的软件”，或者“罗列接口”，甚至“练习写作的方法”，那么可能达到了目的。但是我想，写一篇技术博客，首先是要明确该博客的目的，通常是学习一项技术、解决一个技术问题什么的，比如“学习Linux内存管理机制”，“解决kernel pannic的问题”，“打发时间”等。不是所有的的事情都要写一篇博客来记录，要有自己的判断什么东西值的写，什么东西不值的写。&lt;/p&gt;

&lt;h2 id=&#34;二-写自己的博客:d620bc02c2e972e3f98edfd9f5850d6a&#34;&gt;二、写自己的博客&lt;/h2&gt;

&lt;p&gt;网上相互转载的帖子很多，一篇写的不错的博客经常会被转载，建议不要轻易转载别人的帖子，要写自己的博客。同样一个知识点，或者同样一个问题，你的理解和别人的理解的程度很可能是不一样的，如果轻易的看过以后转载了别人的博客，可能意味着一次自我学习或体会的机会的放弃。可能有人会说：”同样一个GFS的架构图，我画也是这样，他画也是这样，因为GFS就是这样设计的“，这里并不是要求任何一个细节都自己去做，而是要有自己的想法、自己的理解，比如GFS分层的原则是什么？为什么这样分层，分层的好处？如果我要是去做的话，我会怎么搞？写自己的博客可不是意味着不转载别人的，比如说我看了一篇博客，并且经过实验，却是与博客里面写的完全一致，不多也不少，如果要是自己的写的话，也会写的基本一样，那就没必要再花费时间自己写了。另外，以及纯粹记录性的博客，可以转载，比如“C语言运算符的优先级”，当然转载还是原创都不重要了。&lt;/p&gt;

&lt;p&gt;另外，把别人好的博客作为自己的原创，不但没品，而且自欺欺人。&lt;/p&gt;

&lt;p&gt;如果在博客中参考了别人的博客，可以在参考资料里面提及，如果是完全转载，也应注明转载出处。&lt;/p&gt;

&lt;h2 id=&#34;三-博客是总结-不是过程:d620bc02c2e972e3f98edfd9f5850d6a&#34;&gt;三、博客是总结，不是过程&lt;/h2&gt;

&lt;p&gt;写博客有的时候是一个解决问题的过程。为了解决一个问题，今天采用了a方法，发现不行，明天采用了b方法，发现也不行，后天采用c方法，发现行了，那么最终的博客应该是在c方法解决问题后，开始写的。当然，前面的a，b方法，是需要做记录的，但只是博客的原始材料，而不是博客本身。在刚开始写博客时，我经常出现这种情况：对一个技术不清楚，想了解一下，就开一篇技术博客，边查资料边填写博客，结果基本上就是读、复制、粘贴、读、复制、粘贴的过程。最后落到自己手里也是空空如也，想起一句谚语：“狗熊掰梆子——掰一个丢一个”，在懊恼自己的缓存为什么这么少的同时，我也想是否是方法不对？后来我想过，要想掌握一项技术、知识，大概需要这样一个过程：实践遇到问题——理论学习问题——实践解决问题——理论总结问题。我想很多情况我是缺少了其中的三个部分，只有“理论学习问题”的过程。&lt;/p&gt;

&lt;p&gt;后来，我就改成按下列步骤写博客了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;碰到了问题，如果解决不了，而又比较有价值的话，就先记录下来，作为一篇博客的开篇。&lt;/li&gt;
&lt;li&gt;首先，先自己分析问题，基于已有的现象，思考，在笔记本上记录问题与可能的思路。&lt;/li&gt;
&lt;li&gt;其次，从外界获取经验或者知识，比如请教别人，google等，学习他们，在笔记本上记录关键点。&lt;/li&gt;
&lt;li&gt;然后，在实际中用学来的方法去解决问题，笔记本做好记录，要像水流过水渠一样流淌前面记录的思路。&lt;/li&gt;
&lt;li&gt;最后，拿过笔记本，将以上过程再总结成一篇博客。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然，并不是所有博客都能够先从&amp;rdquo;实践遇到问题&amp;rdquo;开始，因为很多情况下都是先从书本理论开始学习的（这也就产生了一定的局限性，有时候你学的很好，反而陷入了固有的框架；有时你学的不好，显得自己更加无知）。这种情况，问题是需要自己总结出来的，比如ULK上会介绍中断和异常的处理机制，这包括中断的过程、CPU的工作、内核的工作、软中断的处理、tasklet等等，我们学习中断，不仅仅是一旦发生中断，Linux内核是按照什么流程去处理，而是要找到这么处理的原因，也就是解决了什么问题。有时，实践验证的成本过高，在有条件的前提下做吧。知识开始学习的时候，经常是只见树木，不见森林。俗话说：”孤木不成林“，弄上三五棵树，才会有”森林“的感觉。&lt;/p&gt;

&lt;h2 id=&#34;四-尽量拒绝三手技术:d620bc02c2e972e3f98edfd9f5850d6a&#34;&gt;四、尽量拒绝三手技术&lt;/h2&gt;

&lt;p&gt;在实际学习或者工作中，一个问题不明白，那么就需要请教别人。如果能够从周围的高手、牛人那得到简单、直接的答复，那是最好的。如果不能，就需要自己在网上查找资料，可能一个问题，林林总总的在网上能搜出很多，选择看哪些就是个问题。尽量去选择原发性的材料，如果你在查gcc的一个编译选项是什么意思，可以使用man手册，如果还不清楚，就去gnu的官方站点去查，最好不要随便从某个转载的技术博客上获取。如果你要找x86平台CPU访问内存的方式，应该从Intel的官方站点去找CPU的资料，最好不要随便在网上找篇博客看了拉倒（起码应该先看官方材料）。&lt;/p&gt;

&lt;p&gt;别人的博客自然带有别人的理解，而这种理解可能带有一定的主观性，有时甚至是错误的，应该养成从原产地采购的习惯。如果哪天能够发明一项技术，那么这算一手技术；如果你在学习一项成熟的技术，那么该技术就属于二手技术了，如果你再从一个非源发性的地方去学习，那么很可能就是“三手技术”。当然，需要考虑实践成本，有时实在找不到源发性的材料，也不要太勉强自己了。另外，英文文章的水平整体高于国人的文章水平，应该尽量看英文文章。&lt;/p&gt;

&lt;h2 id=&#34;五-分清主次-落脚关键点:d620bc02c2e972e3f98edfd9f5850d6a&#34;&gt;五、分清主次、落脚关键点&lt;/h2&gt;

&lt;p&gt;世界万事万物都有联系，凡是和本篇博客的主题有联系的问题，都在本篇博客中描述，是不现实的，也是没必要的。个人认为，一篇技术博客应该不超过两个主题，如果超过了，就应该拆分。但是次要问题可能会有不少，这些次要问题不一定都要解决掉，但一定要分清优先级，和主题关系比较大的，应首先解决，关系小的，应其次解决，甚至并不在本篇博客中解决。对于没有解决的问题，可以列在”遗留问题“中，对于在其他博客中讨论的问题，给予链接。&lt;/p&gt;

&lt;p&gt;根据自己的能力，耕耘到合适的层次。我将掌握一项技术划分为如下层次，在博客中通常应该达到第三个层次：
1. 听说过该技术，了解该技术解决什么问题；
2. 使用过该技术，熟悉该技术的使用方法；
3. 解构过该技术，熟悉该技术的架构、原理；
4. 贯通过该技术，将该技术与自己的已有知识完全融合，可以利用该技术架构解决其他问题。&lt;/p&gt;

&lt;h2 id=&#34;六-技术博客的风格:d620bc02c2e972e3f98edfd9f5850d6a&#34;&gt;六、技术博客的风格&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;技术博客不是论文，技术博客有其实用性。当然，也有将论文发在博客上的，比如技术博客的作者大部分应该是工程师，而不是学院派。一篇技术博客可以是小到的一个编程技巧，可以写该技巧的原理、实现方法、好处，但不要写前500后300年的历史介绍和展望未来。技术博客通常关心技术的实用性，而非技术背后理论的复杂性。技术博客也不应该过分求全责备，而把文章写的大而全，而应该追求小而精。&lt;/li&gt;
&lt;li&gt;技术博客应以陈述语气，个人感情色彩应该过滤掉，技术不是生活的全部。有人写技术博客，常喜欢加入自己的心情，“xxx让我好烦啊”、“xxx很难，我一直持续搞了两天没睡觉”，我个人拒绝这种“呻吟”的风格。&lt;/li&gt;
&lt;li&gt;忌罗列代码，代码是实现的过程，而不是原理，列代码是为了看清流程，而非为了列代码而列代码。我个人的习惯是尽量少列代码，如果能够使用校小的篇幅就能说明原理，绝不使用大篇幅的代码。但是如果简单的罗列代码能够一目了然，也绝不浪费过多的笔墨去描述过程。&lt;/li&gt;
&lt;li&gt;图片胜过文字，图片配文字比单纯的文字更加方便理解，甚至一张图就可以省略文字了，多画图，少写字是个原则。&lt;/li&gt;
&lt;li&gt;考虑时间成本，博客基本上是以时间换知识，因此需要越来越快，记录时间也很必要。&lt;/li&gt;
&lt;li&gt;列出遗留问题，以备以后解决。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[2]:&lt;a href=&#34;http://www.zhihu.com/question/22238159&#34;&gt;http://www.zhihu.com/question/22238159&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>转-Python的函数参数传递：传值？引用？</title>
      <link>http://newoxygen.github.io/post/%E8%BD%AC-Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%9A%E4%BC%A0%E5%80%BC%EF%BC%9F%E5%BC%95%E7%94%A8%EF%BC%9F/</link>
      <pubDate>Fri, 20 Nov 2015 14:39:09 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/%E8%BD%AC-Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%9A%E4%BC%A0%E5%80%BC%EF%BC%9F%E5%BC%95%E7%94%A8%EF%BC%9F/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本来想自己谈一下Python函数实际参数的传递机制，但网上看了下有一篇文章写的挺好了，与我的理解相近就直接转载了，原文地址是&lt;a href=&#34;http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/&#34;&gt;《Python的函数参数传递：传值？引用？》&lt;/a&gt;，作者是[winterTTr][2]，稍微修改了一点不通或是自己感觉可以进一步理解的地方，以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想，这个标题或许是很多初学者的问题。尤其是像我这样的对C/C++比较熟悉，刚刚进入python殿堂的朋友们。C/C++的函数参数的传递方式根深蒂固的影响着我们的思维–引用？传值？究竟是那种呢？语言的特性决定了使用的方法，那么，现在我们来探究一下python的函数参数传递方式。&lt;/p&gt;

&lt;h2 id=&#34;对象vs变量:aa74a8d79dd81f1135cdfafa3350c174&#34;&gt;对象VS变量&lt;/h2&gt;

&lt;p&gt;在python中，对象有类型，变量是没有类型的，这正是python这种动态的语言特性，即不需要变量声明，这也是吸引着很多pythoner的一点。所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。所以，希望大家在看到一个python变量的时候，把变量和真正的内存对象分开。
&amp;gt;对象有类型，变量没有类型。
这样，很多问题就容易思考了。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nfoo = 1       #变量nfoo指向一个int类型的对象，值为1
lstFoo = [1]   #变量lsrFoo指向一个list类型的对象，有一个元素lstFoo[0]，值为1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;可变-mutable-与不可变-immutable-对象:aa74a8d79dd81f1135cdfafa3350c174&#34;&gt;可变(mutable)与不可变(immutable)对象&lt;/h2&gt;

&lt;p&gt;对应于上一个概念，就必须引出另一个概念，这就是可变（mutable）对象与不可变（immutable）对象。对于python比较熟悉的人们都应该了解这个事实，在python中，strings, tuples, 和numbers是不可变的对象，而list,dict等则是可变的对象。那么，这些所谓的可变和不可变影响着什么呢？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#可变
nfoo = 1
nfoo = 2
#不可变
lstFoo = [1]
lstFoo[0] = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中第2行，内存中储存数值1的原始int对象不可改变，只是被『抛弃』，或者说『遗忘』，没有引用后被python的垃圾回收机制回收机制处理掉。然后变量nfoo指向一个新的int对象，值为2。&lt;/p&gt;

&lt;p&gt;代码第6行更改了list对象的第一个元素值，因为list是可变的，所以第一个原始变更为2。确切地说，不是变更，而是list的第一个元素指向了一个新的int型对象，就像刚刚说的不被引用的之前的int型对象会自动销毁。具体可以看下面的对比图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ooo.0o0.ooo/2015/11/20/564fe1aac8be4.jpg&#34; alt=&#34;内存示意图&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;python的函数参数传递-传值-引用:aa74a8d79dd81f1135cdfafa3350c174&#34;&gt;Python的函数参数传递：传值？引用？&lt;/h2&gt;

&lt;p&gt;对于变量（与对象相对的概念），python函数参数传递可以理解为就是变量传值操作，用C++的方式理解，就是对void*赋值。如果这个变量的值不可变，我们看似就是引用，如果这个变量的值可变，我们看着像是在赋值。有点晕是吧，我们仍旧举个例子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;不可变对象参数调用
def ChangeInt(a):
    a = 10
nfoo = 2 
ChangeInt(nfoo)
print nfoo #结果是2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时发生了什么，有一个int对象2，和指向它的变量nfoo，当传递给ChangeInt的时候，按照传值的方式，复制了变量nfoo的值，这样，a就是nfoo指向同一个Int对象了，函数中a=10的时候，发生什么？（还记得我上面讲到的那些概念么），int是不能更改的对象，于是，做了一个新的int对象，&lt;strong&gt;局部变量a&lt;/strong&gt;指向它（但是此时，被变量nfoo指向的对象，没有发生变化），于是在外面的感觉就是函数没有改变nfoo的值，看起来像C++中的传值方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;可变对象参数调用
def ChangeList( a ):
    a[0] = 10
lstFoo = [2]
ChangeList(lstFoo )
print nfoo #结果是[10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当传递给ChangeList的时候，变量仍旧按照“传值”的方式，复制了变量lstFoo 的值，于是a和lstFoo 指向同一个对象，但是，list是可以改变的对象，对a[0]的操作，就是对lstFoo指向的对象的内容的操作，于是，这时的a[0] = 10，就是更改了lstFoo 指向的对象的第一个元素，所以，再次输出lstFoo 时，显示[10]，内容被改变了，看起来，像C++中的传引用。&lt;/p&gt;

&lt;p&gt;[2]:&lt;a href=&#34;http://winterttr.me/about/&#34;&gt;http://winterttr.me/about/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>python：nonlocal和global函数探究</title>
      <link>http://newoxygen.github.io/post/python%EF%BC%9Anonlocal%E5%92%8Cglobal%E5%87%BD%E6%95%B0%E6%8E%A2%E7%A9%B6/</link>
      <pubDate>Tue, 17 Nov 2015 16:32:50 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/python%EF%BC%9Anonlocal%E5%92%8Cglobal%E5%87%BD%E6%95%B0%E6%8E%A2%E7%A9%B6/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;在Python3.5.0官方的《 The Python Tutorial》（官方指南）里讲解“类”的章节，出现了nonlocal函数和global函数，两个函数都是为了改变变量的作用域，但是直接看例子也没有理解差别，就去看了《The Python Language Reference》里面&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#global&#34;&gt;7.12&lt;/a&gt;和[7.13][2]关于&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#global&#34;&gt;global&lt;/a&gt;和[nonlocal][2]语句的详细说明和用法终于理解了，这里记录一下理解，以帮助自己记忆和以后的初学者理解。基本上翻译原文，但是具体的细节上，原文有讲的不清楚的地方，我按照自己的理解写清楚了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-python变量作用域与命名空间:876133ac4eeab6c369b294e022f2bdca&#34;&gt;1.Python变量作用域与命名空间&lt;/h2&gt;

&lt;p&gt;Python中能改变变量作用域的是关键字有def，class和lamda，其内部变量为封闭作用域；if/elif/else，while/for，try/except/else/finally等不改变变量的作用域，其内变量与外部变量作用域一致。&lt;/p&gt;

&lt;p&gt;变量的作用域指的是Python程序可以直接访问的命名空间，Python程序运行时会按顺序访问到4个命名空间，也就是4个层次的作用域，顺序如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;代码中最里面区域的命名空间，首先被搜索，包括了代码块最里面的局部变量；&lt;/li&gt;
&lt;li&gt;任何封闭作用域的函数，都是从最近的封闭作用域开始搜索的，这个既不是局部变量，也不是全家变量；&lt;/li&gt;
&lt;li&gt;接着搜索的区域是当前模块所在的全局变量的命名空间；&lt;/li&gt;
&lt;li&gt;最后搜索的区域是包含了内置名称的命名空间。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-global语句:876133ac4eeab6c369b294e022f2bdca&#34;&gt;2.global语句&lt;/h2&gt;

&lt;p&gt;global是一个声明语句，该声明在当前整个代码块中都有效。这意味着列在其后的所有标识符将被解析为全局有效的。尽管没有被global声明的自由变量也可以引用全局变量，但想要对全局变量赋值则必须先使用global关键字进行声明。使用global时有以下两条限制：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在同一代码块中，列在global语句中的所有标识符不能在该global语句前出现（注意这是对同一层次的封闭作用域而言）。&lt;/li&gt;
&lt;li&gt;列在global 语句后的标识符不能被定义成形参，不能出现在for循环控制的目标、类定义和函数定义，或者import语句中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CPython实现细节：当前实现并未强制履行上面两条限制，但程序不应该滥用这种自由，因为未来的版本可能会强制履行它们或者不留痕迹的改变程序含义。&lt;/p&gt;

&lt;p&gt;注意：global对解析器而言是一个指令。它仅仅会作用于与global语句一同解析的代码。特别的一点，作为参数应用于内建函数exec()的字符串或代码对象中,如果包含 global语句，该语句不会对包含exec()函数调用的代码块产生任何副作用。同样的，作为exec()参数的字符串中的代码也不会受包含该exec()的代码块中的global语句影响。eval()与compile()函数也是如此。&lt;/p&gt;

&lt;h2 id=&#34;3-nonlocal语句:876133ac4eeab6c369b294e022f2bdca&#34;&gt;3.nonlocal语句&lt;/h2&gt;

&lt;p&gt;nonlocal是个声明语句，可以将它后面列出的标识符关联到最近的封闭作用域里定义过的同名变量（不包括全局变量，只是最近封闭作用域的变量），这很重要，因为默认情况下python是首先搜索本地命名空间的，这个语句可以让python搜索除了模块全局变量以外的变量，进行重新绑定。&lt;/p&gt;

&lt;p&gt;不同于在global语句，nonlocal只能将它后面所列标识符关联到封闭作用域中已经存在的绑定，因此重新绑定的变量它实际的作用域是不清楚的（这要看这个已经存在的变量本来在哪一层作用域，最后的代码示例说明了）。&lt;/p&gt;

&lt;p&gt;在nonlocal语句后的标识符不能与本地作用域中已经存在的绑定冲突（也就是在nonlocal语句同级作用域之前不能有相同标识符的声明）。&lt;/p&gt;

&lt;h2 id=&#34;4-示例程序:876133ac4eeab6c369b294e022f2bdca&#34;&gt;4.示例程序&lt;/h2&gt;

&lt;p&gt;官网上为了让读者理解local，nonlocal和global，有一个演示程序，我做了一些一些修改说明，方便看出程序演示目的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def scope_test():
    def do_local():
        spam = &amp;quot;local spam of do_local&amp;quot;
    def do_nonlocal():
        nonlocal spam
        spam = &amp;quot;nonlocal spam of do_nonlocal&amp;quot;
    def do_global():
        global spam
        spam = &amp;quot;global spam of do_global&amp;quot;
    spam = &amp;quot;test spam of scope_test&amp;quot;

    #do_local函数内部的赋值不影响scope_test作用域的spam
    do_local()
    print(&amp;quot;After local assignment:&amp;quot;, spam)

    #do_nonlocal函数内部的赋值影响scope_test作用域的spam，但是不影响全局的spam
    do_nonlocal()
    print(&amp;quot;After nonlocal assignment:&amp;quot;, spam)

    #do_global函数内部的赋值影响全局的spam，但是不影响scope_test作用域的spam
    do_global()
    print(&amp;quot;After global assignment:&amp;quot;, spam)

scope_test()
print(&amp;quot;In global scope:&amp;quot;, spam)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常的话，运行结果应该是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;After local assignment: test spam of scope_test
After nonlocal assignment: nonlocal spam of do_nonlocal
After global assignment: nonlocal spam of do_nonlocal
In global scope: global spam of do_global
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了证明nolocal语句绑定的变量名的作用域是不确定的，我们可以修改下程序如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def scope_test():
    spam = &amp;quot;local spam of scope_test&amp;quot;
    def do_local():
        spam = &amp;quot;local spam of do_local&amp;quot;
        print(&amp;quot;After local assignment:&amp;quot;, spam)
        def do_nonlocal():
            #通过nonlocal声明将spam和最近的do_local模块下spam关联，所以作用域是do_local整个函数体，这与上一个的程序不同
            nonlocal spam
            spam = &amp;quot;nonlocal spam of do_nonlocal&amp;quot;
        do_nonlocal()
        print(&amp;quot;After nonlocal assignment:&amp;quot;,spam)
    do_local()
    print(&amp;quot;After nonlocal assignment, scope_test&#39;s spam:&amp;quot;,spam)

scope_test()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常的话，运行结果应该是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;After local assignment: local spam of do_local
After nonlocal assignment: nonlocal spam of do_nonlocal
After nonlocal assignment, scope_test&#39;s spam: local spam of scope_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[2]:&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#nonlocal&#34;&gt;https://docs.python.org/3/reference/simple_stmts.html#nonlocal&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hugo快速建站</title>
      <link>http://newoxygen.github.io/post/hugo%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99/</link>
      <pubDate>Sun, 15 Nov 2015 18:27:31 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/hugo%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本来想直接研究hugo的theme结构和相关配置的，但是自己在Github Pages上建站的过程中尽管参考了其他人的教程，还是有过一些错误，导致了一些问题，因此想再用自己的话梳理一下过程和方法，强调一下容易出错的地方，尽量追求全而细，让能看到这篇文章的人，不管有没有编程方面的经验都能够实践成功。来吧，让我们使用windows+msysgit+Github+hugo来实现自己的个性化页面。相关软件打包：&lt;a href=&#34;http://pan.baidu.com/s/1sjpE3dr&#34;&gt;百度云&lt;/a&gt;，提取码：&lt;code&gt;aca1&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;1.准备工作&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1.1&#34;&gt;1.1 msysGit客户端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1.2&#34;&gt;1.2 注册Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1.3&#34;&gt;1.3 Windows本地配置Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1.4&#34;&gt;1.4 使用hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;2.正式建立静态网站&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2.1&#34;&gt;2.1 新建文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2.2&#34;&gt;2.2 安装皮肤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2.3&#34;&gt;2.3 运行hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2.4&#34;&gt;2.4 简单配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;3.高级配置&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#3.1&#34;&gt;3.1 多说评论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3.2&#34;&gt;3.2 代码高亮&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;4.后记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1&#34;&gt;1.准备工作&lt;/h2&gt;
                                                                              

&lt;p&gt;&lt;h3 id=&#34;1.1&#34;&gt;1.1 msysGit客户端&lt;/h3&gt;
在Windows下默认是没有预装Git的，如果你是Mac和Linux的用户则没有这个烦恼，因此我们首先需要在Windows系统下安装一个Git软件，笔者使用的是&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;msysGit&lt;/a&gt;，截止发文最新的版本是2.6.3，官网Download会自动识别系统（32位和64位）下载，之后一个个步骤按照向导安装就行，上面英文写的很清楚，基本可以按照默认的来，但是到了Ajusting your PATH environment（即设置环境变量）这一步时，建议还是勾选第二项Run Git from Windows Command Prompt，这样在Windows命令行中就可以全局使用Git相关命令。&lt;/p&gt;

&lt;p&gt;&lt;h3 id=&#34;1.2&#34;&gt;1.2 注册Github&lt;/h3&gt;
点击&lt;a href=&#34;https://github.com/&#34;&gt;Github官网&lt;/a&gt;进入Github首页，这样你能够进行注册，输入用户名、Email地址、密码即可进行注册，我们选择不需要花钱的Free类型用户，点击Finish sign up，这样即可完成注册，此时在页面顶部Bootcamp系统会提示你接下来可以做哪些事情，而我们首先需要做的就是Create Repositories，我们可以点击这一项进去看看教程，当然也可以根据我下面的提示直接开始：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;点击右侧New repository（新建仓库），此时系统会提示你验证邮箱，你需要去刚刚注册用的邮箱验证地址；&lt;/li&gt;
&lt;li&gt;验证完毕即可重新New reository，用户名一定要用：&lt;code&gt;你的注册用户名.github.io&lt;/code&gt;，其他无需修改，然后点击Create repository即可;&lt;/li&gt;
&lt;li&gt;下面自动进入一个快速设置页面，告诉我们如何在仓库内添加东西，这就需要在Windows本地设置了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;h3 id=&#34;1.3&#34;&gt;1.3 Windows本地配置Git&lt;/h3&gt;
本文开篇就说了Windows下的Git程序，但是没有做配置，还是不能用的，这里解说下基本的配置：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先打开Git Bash做些全局设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;你的注册用户名&amp;quot;
git config --global user.email &amp;quot;你的邮箱&amp;quot;
git config --global color.ui auto
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置SSH Key：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;你的邮箱&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后会要求输入存储id_rsa的目录，接着是输入密码，这个密码可以与github的不同，过程中确认即可，最后会出现一个随机图形，说明生成SSH密匙成功，这样我们需要到刚刚的存储目录下打开id_rsa.pub复制里面的内容，到你的github页面上-&amp;gt;点击右上角头像旁三角-&amp;gt;settings-&amp;gt;SSH keys-&amp;gt;add SSH key-&amp;gt;黏贴刚刚复制的内容保存。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;h3 id=&#34;1.4&#34;&gt;1.4 使用hugo&lt;/h3&gt;
&lt;a href=&#34;http://www.gohugo.io/&#34;&gt;hugo&lt;/a&gt;是一个快速的静态网站引擎，使用Go语言开发，可以用Markdown格式的文章生成一个完整的静态网站，然后托管到自己的&lt;code&gt;用户名.Github.io&lt;/code&gt;的Github仓库中，实现一个静态站点，一般用于博客或者项目主页等。那么我们先来了解下如何获取和使用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先从&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;官网下载&lt;/a&gt;相关的版本，比如我是32位windows系统的，我下载hugo_0.14_windows_386.zip；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解压缩后，将里面的exe文件重命名为hugo.exe，并放在&lt;code&gt;C:\hugo\hugo.exe&lt;/code&gt;即可；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;添加环境变量：我的电脑-属性-高级系统设置-环境变量，编辑PATH，加入&lt;code&gt;;C:\hugo&lt;/code&gt;,用英文分号与之前的内容分割开。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样我们可以测试下环境是否正常：
使用Windows命令行（Win+R输入cmd）输入下列命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:\hugo
hugo new site www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入hugo目录下可以看到一个www的文件夹，就是刚刚新建的站点，目录的结构是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▸ archetypes/
▸ content/
▸ layouts/
▸ static/
  config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尽管里面没有任何内容，但是恭喜你，说明程序可以正常使用了。&lt;/p&gt;

&lt;p&gt;&lt;h2 id=&#34;2&#34;&gt;2.正式建立静态网站&lt;/h2&gt;
&lt;h3 id=&#34;2.1&#34;&gt;2.1 新建文章&lt;/h3&gt;
首先需要先命令行进入www文件夹下，然后输入以下命令，创建一个关于页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就生成楼www/content/about.md，打开该文件可以看到以下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-11-15T10:42:51+08:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文件是md的，但是+++之间的内容是用TOML编写的文档信息，date代表文档创建的时间，后面的+08：00代表的时区，draft代表草稿，如果生成网站时不加入特殊说明是不生成该页的，title是这篇文章的标题，因此正文中不需要自己再写标题了。
为了方便之后生成聚合页面，我们继续在www/content/post/目录生成第一篇文章：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开first.md文件可以看到以下内容，跟上面的about.md差不多，我们在+++后面编辑一点内容并保存：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-11-15T10:48:56+08:00&amp;quot;
draft = true
title = &amp;quot;first&amp;quot;

+++
# My first blog
1. aaa
2. bbb
3. ccc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3 id=&#34;2.2&#34;&gt;2.2 安装皮肤&lt;/h3&gt;
hugo有很多&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;皮肤(Github)&lt;/a&gt;,也可以看&lt;a href=&#34;http://www.gohugo.org/theme/&#34;&gt;这里(中文)&lt;/a&gt;,可以找到喜欢的皮肤地址，然后在www文件夹下创建一个themes文件夹，在命令行中进入该文件夹后用git的方法获得皮肤(笔者这里使用hyde这个简单点的皮肤主题)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone http://github.com/spf13/hyde.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3 id=&#34;2.3&#34;&gt;2.3 运行hugo&lt;/h3&gt;
在站点根目录www文件夹下运行hugo调试命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --theme=hyde --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;theme指明使用的主题名称（themes文件夹下的主题文件夹名称），buildDrafts指出编译草稿部分（即draft=true的文件），watch参数可以在文件修改时实时自动刷新页面。生成后我们可以在按照命令行提示在浏览器中输入&lt;a href=&#34;http://127.0.0.1:1313&#34;&gt;http://127.0.0.1:1313&lt;/a&gt;查看页面，正常的话显示如下：
&lt;img src=&#34;https://ooo.0o0.ooo/2015/11/14/5647fabd8356f.jpg&#34; alt=&#34;hyde1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3 id=&#34;2.4&#34;&gt;2.4 简单配置&lt;/h3&gt;
目前为止，已经生成一个简单的静态站点，但是还有很多地方需要修改，以适应每个人的需求，可以在www站点根目录下看到一个&lt;code&gt;config.toml&lt;/code&gt;配置文件，该文件使用TOML语法编写，基本内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以修改成类似这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://newoxygen.github.io/&amp;quot;#name of your repository
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;氧气计算&amp;quot;#title of your page
theme = &amp;quot;hyde&amp;quot;#default theme

[params]
    description = &amp;quot;CC博客，信奉望远镜与显微镜的哲学&amp;quot;#simple description on page
    themeColor = &amp;quot;theme-base-08&amp;quot; # for hyde theme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新根目录运行&lt;code&gt;hugo server --theme=hyde --buildDrafts --watch&lt;/code&gt;看看效果：
&lt;img src=&#34;https://ooo.0o0.ooo/2015/11/14/5647fffd5519a.jpg&#34; alt=&#34;hyde2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2 id=&#34;3&#34;&gt;3.高级配置&lt;/h2&gt;
由于之前已经设置默认主题，我们再来用&lt;code&gt;hugo new post/sencond.md&lt;/code&gt;新建一篇文章看看有什么区别：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
Categories = [&amp;quot;Development&amp;quot;, &amp;quot;GoLang&amp;quot;]
Description = &amp;quot;&amp;quot;
Tags = [&amp;quot;Development&amp;quot;, &amp;quot;golang&amp;quot;]
date = &amp;quot;2015-11-15T11:53:15+08:00&amp;quot;
menu = &amp;quot;main&amp;quot;
title = &amp;quot;second&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出多了Categories、Description、Tags和menu几个格式化选项，顾名思义，我们可以为文章分类、添加简单描述、添加标签，menu = &amp;ldquo;main&amp;rdquo;代表在左侧home下面显示标题并连接，我们可以把之前创建的about.md文件里加上这句，然后在里面写一些个人简介，这样别人就可以简单点击左侧连接查看你的简介了。介绍完一些有用的配置，我们接着来学习2个高级技巧。&lt;/p&gt;

&lt;p&gt;&lt;h3 id=&#34;3.1&#34;&gt;3.1 多说评论&lt;/h3&gt;
hyde主题默认使用disqus插件，是国外的一种使用javascript编写的评论插件，可以用来嵌入页面中实现静态网页的评论功能，可以直接在&lt;code&gt;config.toml&lt;/code&gt;文件中&lt;code&gt;[params]&lt;/code&gt;下加入&lt;code&gt;disqusShortname = &amp;quot;你的disqus用户名&amp;quot;&lt;/code&gt;，当然前提是你自己去disqus网站注册一个个人账户。国人的模仿能力是无限的，因此也有替代的国内版本&lt;a href=&#34;http://duoshuo.com/&#34;&gt;多说&lt;/a&gt;，可以注册一个多说账号，进入后台管理，有一段需要我们嵌入页面的代码，我们需要将&lt;code&gt;www/themes/hyde/layouts/partials/disqus.html&lt;/code&gt;文件重命名为&lt;code&gt;duoshuo.html&lt;/code&gt;然后打开文件修改成如下形式并保存：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 多说评论框 start --&amp;gt;
&amp;lt;div class=&amp;quot;ds-thread&amp;quot; data-thread-key=&amp;quot;{{ .URL }}&amp;quot; data-title=&amp;quot;{{ .Title }}&amp;quot; data-url=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;!-- 多说评论框 end --&amp;gt;

&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    var duoshuoQuery = {short_name:&amp;quot;{{.Site.Params.duoshuoShortname}}&amp;quot;};

    (function() {
     var ds = document.createElement(&#39;script&#39;);
     ds.type = &#39;text/javascript&#39;;ds.async = true;
     ds.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) + &#39;//static.duoshuo.com/embed.js&#39;;
     ds.charset = &#39;UTF-8&#39;;
     (document.getElementsByTagName(&#39;head&#39;)[0]
      || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
     })();
    &amp;lt;/script&amp;gt;
&amp;lt;!-- 多说公共JS代码 end --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在&lt;code&gt;www/themes/hyde/layouts/_default/single.html&lt;/code&gt;文件中替换如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (isset .Site.Params &amp;quot;disqusShortname&amp;quot;) (ne .Site.Params.disqusShortname &amp;quot;&amp;quot;) }}
            &amp;lt;h2&amp;gt;评论&amp;lt;/h2&amp;gt;
            {{ partial &amp;quot;disqus&amp;quot; . }}
        {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后在&lt;code&gt;www/config.toml&lt;/code&gt;文件中的&lt;code&gt;[params]&lt;/code&gt;下加入&lt;code&gt;duoshuoShortname = &amp;quot;你的多说用户名&amp;quot;&lt;/code&gt;，这样我们再次调试站点可以看到每篇文章的下面都有一个多说评论框，其他人可以使用这个评论框评论文章。&lt;/p&gt;

&lt;p&gt;&lt;h3 id=&#34;3.2&#34;&gt;3.2 代码高亮&lt;/h3&gt;
官方推荐使用Pygments来进行代码高亮的支持，我使用了&lt;a href=&#34;http://tonybai.com/2015/09/23/intro-of-gohugo/&#34;&gt;Tony Bai&lt;/a&gt;推荐的[highlight.js][10],用起来很顺手，目前最新的版本是8.9.1,只要下载常用代码的高亮支持即可，是一个zip的压缩文件包，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▸ styles/
  CHANGES.MD
  highlight.pack.js
  LICENSE
  README.md
  README.ru.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我一般会把highlight.pack.js改成highlight.js方便调用，styles目录下有很多不同类型的高亮方式，都是css文件。接下来把highlight.js文件放到www/themes/hyde/static/js/目录下，没有目录自己建；把需要的哪种风格的css文件放到www/themes/hyde/static/css目录下。接着在www/themes/hyde/layouts/partials/head.html文件中插入如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Highlight.js and css --&amp;gt;
&amp;lt;script src=&amp;quot;{{ .Site.BaseURL }}js/highlight.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ .Site.BaseURL }}css/monokai.css&amp;quot;&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为个人比较喜欢monokai风格，所以用了monokai.css，相应的要把monokai.css复制到刚刚说的css目录下，你也可以根据自己的喜好选择其他的风格。当你再次调试站点查看时如果内容中有代码可以发现代码已经被着色，更加清楚明了。&lt;/p&gt;

&lt;p&gt;&lt;h2 id=&#34;4&#34;&gt;4.将本地站点上传&lt;/h2&gt;
之前第一节已经注册好Github并创建软件仓库，现在我们需要生成最终的页面并上传到自己的Github仓库中，完成站点的最终部署，只需要在www根目录输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
或没有配置好config.toml文件的话用：
hugo --thmem=hyde --baseUrl=&amp;quot;http://用户名.github.io&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样在www目录下会生成一个public文件夹用于发布正式的站点，进行下列操作上传所有文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd public
git init
git remote add origin https://github.com/用户名/用户名.github.io.git
git add -A
git commit -m &amp;quot;first commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;过程中会要求用户输入github的用户名和密码，密码是隐式的，所以别以为没输入。上传成功后，只要在浏览器中输入http://用户名.github.io即可访问你自己的站点了。&lt;/p&gt;

&lt;p&gt;&lt;h2 id=&#34;4&#34;&gt;4.后记&lt;/h2&gt;
之前想自己写博客，觉得自己搭建东西放心点，就在网上搜索了相关方法，最后锁定到hugo这个软件，花了一个晚上熟悉网上各位大神的说明文档，自己一步步搭建起来的，后面用了一个上午的时间写了这篇文章总结了自己搭建的方法和过程，如有问题还望评论提问，如有错误一并指正。&lt;/p&gt;

&lt;p&gt;[10]:&lt;a href=&#34;https://highlightjs.org/&#34;&gt;https://highlightjs.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用mistune解析markdown</title>
      <link>http://newoxygen.github.io/post/%E5%88%A9%E7%94%A8mistune%E8%A7%A3%E6%9E%90markdown/</link>
      <pubDate>Fri, 13 Nov 2015 11:33:53 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/%E5%88%A9%E7%94%A8mistune%E8%A7%A3%E6%9E%90markdown/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;最近新学&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;和&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;，一个用于写作，一个用于编程，都十分顺手，因此想学一下怎样用Python实现对Markdown语法的解析。在Github上搜索到一个项目：&lt;a href=&#34;https://github.com/lepture/mistune&#34;&gt;mistune&lt;/a&gt;。该项目使用纯Python实现了Markdown语法到HTML的解析，号称很快速，项目主页上有它与其他Python解析器的性能对比，我没有尝试，有兴趣的可以做些基准测试。本篇描述的是怎样利用mistune来实现对Markdown的解析，以下正是我学习和实践的过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第一步-初识:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;第一步：初识&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://mistune.readthedocs.org/en/latest/&#34;&gt;mistune项目文档&lt;/a&gt;对mistune的 &lt;em&gt;特性&lt;/em&gt; 、 &lt;em&gt;安装方法&lt;/em&gt; 、 &lt;em&gt;基本用法&lt;/em&gt; 和 &lt;em&gt;高级用法&lt;/em&gt; 等都有详细描述，在此不再赘述太多，使用前需要从&lt;a href=&#34;https://github.com/lepture/mistune&#34;&gt;主页&lt;/a&gt;下载&lt;code&gt;mistune.py&lt;/code&gt;文件，基本的使用方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#test.py
import mistune
mk = mistune.Markdown()
output = mk(&#39;I am using **mistune markdown parser**&#39;)
print(output)
#这段代码将会输出：&amp;lt;p&amp;gt;I am using &amp;lt;strong&amp;gt;mistune markdown parser&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，&lt;code&gt;test.py&lt;/code&gt;文件需要和&lt;code&gt;mistune.py&lt;/code&gt;文件在同一个目录下，否则Python不能正常&lt;code&gt;import mistune&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;第二步-根据源文件自动生成html文档:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;第二步：根据源文件自动生成HTML文档&lt;/h2&gt;

&lt;p&gt;在理解了第一步基本的使用方法后，我考虑自己写一个脚本调用&lt;code&gt;mistune&lt;/code&gt;模块，并通过Python文件操作读取源文件（&lt;code&gt;.md&lt;/code&gt;文件），并自动生成HTML文档（&lt;code&gt;preview.html&lt;/code&gt;），于是写了第一个简短的脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#md2html.py
import mistune
mk = mistune.Markdown()
with open(&#39;input.md&#39;,&#39;r&#39;) as f:
    s = f.read()
html = mk(s)
with open(&#39;preview.html&#39;,&#39;w&#39;) as f:
    f.write(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，只要&lt;code&gt;md2html.py&lt;/code&gt;和&lt;code&gt;mistune.py&lt;/code&gt;在同一目录下，该脚本就可以根据&lt;code&gt;input.md&lt;/code&gt;文件中Markdown语法书写的内容自动生成一个&lt;code&gt;preview.html&lt;/code&gt;文件，当然，前提是你在同一个目录下提前写好一个符合Markdown语法要求的&lt;code&gt;input.md&lt;/code&gt;文档。&lt;/p&gt;

&lt;p&gt;可以看出，以上脚本尽管简单地实现了目的，但是问题多多，且使用上不灵活，总结有以下几个缺点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;只能在&lt;code&gt;input.md&lt;/code&gt;文件里提前写好内容才能转成HTML文档，使用上不灵活；&lt;/li&gt;
&lt;li&gt;没有异常处理机制，脚本不健壮，假如没有提前创建&lt;code&gt;input.md&lt;/code&gt;，将报错：&lt;code&gt;FileNotFoundError&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;缺少提示符，用户界面不友好；&lt;/li&gt;
&lt;li&gt;不能自动调用浏览器预览生成的HTML文档，不直观。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;第三步-改进:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;第三步：改进&lt;/h2&gt;

&lt;p&gt;鉴于之前的脚本存在各种缺点，我对脚本进行了改进：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#python3 code
#md2html.py
import sys
import mistune
import webbrowser

#Count the number of command line parameters to find the path of md file
lenArgv = len(sys.argv)
if lenArgv == 1:
    url = input(&#39;Please input the path of md file:&amp;gt;&#39;)
elif lenArgv == 2:
    url = sys.argv[1]
else:
    url = input(&#39;You can only input a single path:&amp;gt;&#39;)

mk = mistune.Markdown()

#Exception handling:Avoid FileNotFoundError
while True:
    try:
        with open(url,&#39;r&#39;) as f:
            s = f.read()
        break
    except FileNotFoundError:
        url = input(&#39;Not Found,Input the path again:&amp;gt;&#39;)

html = mk(s)
with open(&#39;preview.html&#39;,&#39;w&#39;) as f:
    f.write(html)

#End of run,open preview.html automatically by default browser
print(&#39;preview.html is generated successfully!&#39;)
webbrowser.open(&#39;preview.html&#39;)
input()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改进版脚本说明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;import sys&lt;/code&gt;实现了对命令行参数的判断，可以用&lt;code&gt;python md2html.py &amp;lt;可缺省的源文件路径&amp;gt;&lt;/code&gt;进行调用，也可以直接运行&lt;code&gt;md2html.py&lt;/code&gt;文件后输入源文件路径进行调用，比之前的程序更加灵活；&lt;/li&gt;
&lt;li&gt;通过异常处理程序判断用户输入的路径是否正确，避免了程序的崩溃，增强了健壮性；&lt;/li&gt;
&lt;li&gt;每一步都引入了提示符，便于用户使用时的理解，界面更友好；&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;import webbrowser&lt;/code&gt;实现html文件生成后的自动预览，更加直观。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;写在后面:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;写在后面&lt;/h2&gt;

&lt;p&gt;本文旨在提供一种学习思路，只是个人的想法，如有不正确的地方，还希望多多留言指正！另外Python编码风格的问题和写作方法的问题也请一起斧正，谢谢！使用中发现mistune这个模块对Markdown语法的解析并不完美，具体解析以下Markdown语法的时候即可发现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#test.md
*  unordered list
1. ordered list
1. other
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://newoxygen.github.io/about/</link>
      <pubDate>Fri, 13 Nov 2015 11:16:28 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;自我评价:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;自我评价：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一个热爱写作的工科男&lt;/li&gt;
&lt;li&gt;通信工程专业毕业却喜欢计算机科学&lt;/li&gt;
&lt;li&gt;一个怀旧但是会往前看的人&lt;/li&gt;
&lt;li&gt;二十多岁了还怀着少年时的梦&lt;/li&gt;
&lt;li&gt;想折腾一辈子&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;感谢:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;感谢：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;本博客使用&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;，感谢设计者;&lt;/li&gt;
&lt;li&gt;本博客使用&lt;a href=&#34;http://www.gohugo.io/&#34;&gt;hugo&lt;/a&gt;建立，感谢设计者;&lt;/li&gt;
&lt;li&gt;本博客使用了&lt;a href=&#34;https://github.com/spf13/hyde&#34;&gt;hyde&lt;/a&gt;主题，感谢设计者;&lt;/li&gt;
&lt;li&gt;感谢&lt;a href=&#34;http://tonybai.com/&#34;&gt;Tony Bai的博客&lt;/a&gt;，&lt;a href=&#34;http://tonybai.com/2015/09/23/intro-of-gohugo/&#34;&gt;hugo教程&lt;/a&gt;写的很详细；&lt;/li&gt;
&lt;li&gt;感谢&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;喜欢的话:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;喜欢的话：&lt;/h2&gt;

&lt;p&gt;痛楚难以避免，而磨难可以选择。——村上春树[日]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>