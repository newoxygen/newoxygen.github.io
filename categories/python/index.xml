<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 氧气计算</title>
    <link>http://newoxygen.github.io/categories/python/</link>
    <description>Recent content in Python on 氧气计算</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Nov 2015 14:39:09 +0800</lastBuildDate>
    <atom:link href="http://newoxygen.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>转-Python的函数参数传递：传值？引用？</title>
      <link>http://newoxygen.github.io/post/%E8%BD%AC-Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%9A%E4%BC%A0%E5%80%BC%EF%BC%9F%E5%BC%95%E7%94%A8%EF%BC%9F/</link>
      <pubDate>Fri, 20 Nov 2015 14:39:09 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/%E8%BD%AC-Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%9A%E4%BC%A0%E5%80%BC%EF%BC%9F%E5%BC%95%E7%94%A8%EF%BC%9F/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本来想自己谈一下Python函数实际参数的传递机制，但网上看了下有一篇文章写的挺好了，与我的理解相近就直接转载了，原文地址是&lt;a href=&#34;http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/&#34;&gt;《Python的函数参数传递：传值？引用？》&lt;/a&gt;，作者是&lt;a href=&#34;http://winterttr.me/about/&#34;&gt;winterTTr&lt;/a&gt;，稍微修改了一点不通或是自己感觉可以进一步理解的地方，以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想，这个标题或许是很多初学者的问题。尤其是像我这样的对C/C++比较熟悉，刚刚进入python殿堂的朋友们。C/C++的函数参数的传递方式根深蒂固的影响着我们的思维–引用？传值？究竟是那种呢？语言的特性决定了使用的方法，那么，现在我们来探究一下python的函数参数传递方式。&lt;/p&gt;

&lt;h2 id=&#34;对象vs变量:aa74a8d79dd81f1135cdfafa3350c174&#34;&gt;对象VS变量&lt;/h2&gt;

&lt;p&gt;在python中，对象有类型，变量是没有类型的，这正是python这种动态的语言特性，即不需要变量声明，这也是吸引着很多pythoner的一点。所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。所以，希望大家在看到一个python变量的时候，把变量和真正的内存对象分开。
&amp;gt;对象有类型，变量没有类型。
这样，很多问题就容易思考了。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nfoo = 1       #变量nfoo指向一个int类型的对象，值为1
lstFoo = [1]   #变量lsrFoo指向一个list类型的对象，有一个元素lstFoo[0]，值为1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;可变-mutable-与不可变-immutable-对象:aa74a8d79dd81f1135cdfafa3350c174&#34;&gt;可变(mutable)与不可变(immutable)对象&lt;/h2&gt;

&lt;p&gt;对应于上一个概念，就必须引出另一个概念，这就是可变（mutable）对象与不可变（immutable）对象。对于python比较熟悉的人们都应该了解这个事实，在python中，strings, tuples, 和numbers是不可变的对象，而list,dict等则是可变的对象。那么，这些所谓的可变和不可变影响着什么呢？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#可变
nfoo = 1
nfoo = 2
#不可变
lstFoo = [1]
lstFoo[0] = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中第2行，内存中储存数值1的原始int对象不可改变，只是被『抛弃』，或者说『遗忘』，没有引用后被python的垃圾回收机制回收机制处理掉。然后变量nfoo指向一个新的int对象，值为2。&lt;/p&gt;

&lt;p&gt;代码第6行更改了list对象的第一个元素值，因为list是可变的，所以第一个原始变更为2。确切地说，不是变更，而是list的第一个元素指向了一个新的int型对象，就像刚刚说的不被引用的之前的int型对象会自动销毁。具体可以看下面的对比图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ooo.0o0.ooo/2015/11/20/564fe1aac8be4.jpg&#34; alt=&#34;内存示意图&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;python的函数参数传递-传值-引用:aa74a8d79dd81f1135cdfafa3350c174&#34;&gt;Python的函数参数传递：传值？引用？&lt;/h2&gt;

&lt;p&gt;对于变量（与对象相对的概念），python函数参数传递可以理解为就是变量传值操作，用C++的方式理解，就是对void*赋值。如果这个变量的值不可变，我们看似就是引用，如果这个变量的值可变，我们看着像是在赋值。有点晕是吧，我们仍旧举个例子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;不可变对象参数调用
def ChangeInt(a):
    a = 10
nfoo = 2 
ChangeInt(nfoo)
print nfoo #结果是2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时发生了什么，有一个int对象2，和指向它的变量nfoo，当传递给ChangeInt的时候，按照传值的方式，复制了变量nfoo的值，这样，a就是nfoo指向同一个Int对象了，函数中a=10的时候，发生什么？（还记得我上面讲到的那些概念么），int是不能更改的对象，于是，做了一个新的int对象，&lt;strong&gt;局部变量a&lt;/strong&gt;指向它（但是此时，被变量nfoo指向的对象，没有发生变化），于是在外面的感觉就是函数没有改变nfoo的值，看起来像C++中的传值方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;可变对象参数调用
def ChangeList( a ):
    a[0] = 10
lstFoo = [2]
ChangeList(lstFoo )
print nfoo #结果是[10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当传递给ChangeList的时候，变量仍旧按照“传值”的方式，复制了变量lstFoo 的值，于是a和lstFoo 指向同一个对象，但是，list是可以改变的对象，对a[0]的操作，就是对lstFoo指向的对象的内容的操作，于是，这时的a[0] = 10，就是更改了lstFoo 指向的对象的第一个元素，所以，再次输出lstFoo 时，显示[10]，内容被改变了，看起来，像C++中的传引用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>python：nonlocal和global函数探究</title>
      <link>http://newoxygen.github.io/post/python%EF%BC%9Anonlocal%E5%92%8Cglobal%E5%87%BD%E6%95%B0%E6%8E%A2%E7%A9%B6/</link>
      <pubDate>Tue, 17 Nov 2015 16:32:50 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/python%EF%BC%9Anonlocal%E5%92%8Cglobal%E5%87%BD%E6%95%B0%E6%8E%A2%E7%A9%B6/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;在Python3.5.0官方的《 The Python Tutorial》（官方指南）里讲解“类”的章节，出现了nonlocal函数和global函数，两个函数都是为了改变变量的作用域，但是直接看例子也没有理解差别，就去看了《The Python Language Reference》里面&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#global&#34;&gt;7.12&lt;/a&gt;和&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#nonlocal&#34;&gt;7.13&lt;/a&gt;关于&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#global&#34;&gt;global&lt;/a&gt;和&lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#nonlocal&#34;&gt;nonlocal&lt;/a&gt;语句的详细说明和用法终于理解了，这里记录一下理解，以帮助自己记忆和以后的初学者理解。基本上翻译原文，但是具体的细节上，原文有讲的不清楚的地方，我按照自己的理解写清楚了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-python变量作用域与命名空间:876133ac4eeab6c369b294e022f2bdca&#34;&gt;1.Python变量作用域与命名空间&lt;/h2&gt;

&lt;p&gt;Python中能改变变量作用域的是关键字有def，class和lamda，其内部变量为封闭作用域；if/elif/else，while/for，try/except/else/finally等不改变变量的作用域，其内变量与外部变量作用域一致。&lt;/p&gt;

&lt;p&gt;变量的作用域指的是Python程序可以直接访问的命名空间，Python程序运行时会按顺序访问到4个命名空间，也就是4个层次的作用域，顺序如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;代码中最里面区域的命名空间，首先被搜索，包括了代码块最里面的局部变量；&lt;/li&gt;
&lt;li&gt;任何封闭作用域的函数，都是从最近的封闭作用域开始搜索的，这个既不是局部变量，也不是全家变量；&lt;/li&gt;
&lt;li&gt;接着搜索的区域是当前模块所在的全局变量的命名空间；&lt;/li&gt;
&lt;li&gt;最后搜索的区域是包含了内置名称的命名空间。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-global语句:876133ac4eeab6c369b294e022f2bdca&#34;&gt;2.global语句&lt;/h2&gt;

&lt;p&gt;global是一个声明语句，该声明在当前整个代码块中都有效。这意味着列在其后的所有标识符将被解析为全局有效的。尽管没有被global声明的自由变量也可以引用全局变量，但想要对全局变量赋值则必须先使用global关键字进行声明。使用global时有以下两条限制：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在同一代码块中，列在global语句中的所有标识符不能在该global语句前出现（注意这是对同一层次的封闭作用域而言）。&lt;/li&gt;
&lt;li&gt;列在global 语句后的标识符不能被定义成形参，不能出现在for循环控制的目标、类定义和函数定义，或者import语句中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CPython实现细节：当前实现并未强制履行上面两条限制，但程序不应该滥用这种自由，因为未来的版本可能会强制履行它们或者不留痕迹的改变程序含义。&lt;/p&gt;

&lt;p&gt;注意：global对解析器而言是一个指令。它仅仅会作用于与global语句一同解析的代码。特别的一点，作为参数应用于内建函数exec()的字符串或代码对象中,如果包含 global语句，该语句不会对包含exec()函数调用的代码块产生任何副作用。同样的，作为exec()参数的字符串中的代码也不会受包含该exec()的代码块中的global语句影响。eval()与compile()函数也是如此。&lt;/p&gt;

&lt;h2 id=&#34;3-nonlocal语句:876133ac4eeab6c369b294e022f2bdca&#34;&gt;3.nonlocal语句&lt;/h2&gt;

&lt;p&gt;nonlocal是个声明语句，可以将它后面列出的标识符关联到最近的封闭作用域里定义过的同名变量（不包括全局变量，只是最近封闭作用域的变量），这很重要，因为默认情况下python是首先搜索本地命名空间的，这个语句可以让python搜索除了模块全局变量以外的变量，进行重新绑定。&lt;/p&gt;

&lt;p&gt;不同于在global语句，nonlocal只能将它后面所列标识符关联到封闭作用域中已经存在的绑定，因此重新绑定的变量它实际的作用域是不清楚的（这要看这个已经存在的变量本来在哪一层作用域，最后的代码示例说明了）。&lt;/p&gt;

&lt;p&gt;在nonlocal语句后的标识符不能与本地作用域中已经存在的绑定冲突（也就是在nonlocal语句同级作用域之前不能有相同标识符的声明）。&lt;/p&gt;

&lt;h2 id=&#34;4-示例程序:876133ac4eeab6c369b294e022f2bdca&#34;&gt;4.示例程序&lt;/h2&gt;

&lt;p&gt;官网上为了让读者理解local，nonlocal和global，有一个演示程序，我做了一些一些修改说明，方便看出程序演示目的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def scope_test():
    def do_local():
        spam = &amp;quot;local spam of do_local&amp;quot;
    def do_nonlocal():
        nonlocal spam
        spam = &amp;quot;nonlocal spam of do_nonlocal&amp;quot;
    def do_global():
        global spam
        spam = &amp;quot;global spam of do_global&amp;quot;
    spam = &amp;quot;test spam of scope_test&amp;quot;

    #do_local函数内部的赋值不影响scope_test作用域的spam
    do_local()
    print(&amp;quot;After local assignment:&amp;quot;, spam)

    #do_nonlocal函数内部的赋值影响scope_test作用域的spam，但是不影响全局的spam
    do_nonlocal()
    print(&amp;quot;After nonlocal assignment:&amp;quot;, spam)

    #do_global函数内部的赋值影响全局的spam，但是不影响scope_test作用域的spam
    do_global()
    print(&amp;quot;After global assignment:&amp;quot;, spam)

scope_test()
print(&amp;quot;In global scope:&amp;quot;, spam)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常的话，运行结果应该是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;After local assignment: test spam of scope_test
After nonlocal assignment: nonlocal spam of do_nonlocal
After global assignment: nonlocal spam of do_nonlocal
In global scope: global spam of do_global
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了证明nolocal语句绑定的变量名的作用域是不确定的，我们可以修改下程序如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def scope_test():
    spam = &amp;quot;local spam of scope_test&amp;quot;
    def do_local():
        spam = &amp;quot;local spam of do_local&amp;quot;
        print(&amp;quot;After local assignment:&amp;quot;, spam)
        def do_nonlocal():
            #通过nonlocal声明将spam和最近的do_local模块下spam关联，所以作用域是do_local整个函数体，这与上一个的程序不同
            nonlocal spam
            spam = &amp;quot;nonlocal spam of do_nonlocal&amp;quot;
        do_nonlocal()
        print(&amp;quot;After nonlocal assignment:&amp;quot;,spam)
    do_local()
    print(&amp;quot;After nonlocal assignment, scope_test&#39;s spam:&amp;quot;,spam)

scope_test()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常的话，运行结果应该是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;After local assignment: local spam of do_local
After nonlocal assignment: nonlocal spam of do_nonlocal
After nonlocal assignment, scope_test&#39;s spam: local spam of scope_test
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>利用mistune解析markdown</title>
      <link>http://newoxygen.github.io/post/%E5%88%A9%E7%94%A8mistune%E8%A7%A3%E6%9E%90markdown/</link>
      <pubDate>Fri, 13 Nov 2015 11:33:53 +0800</pubDate>
      
      <guid>http://newoxygen.github.io/post/%E5%88%A9%E7%94%A8mistune%E8%A7%A3%E6%9E%90markdown/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;最近新学&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;和&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;，一个用于写作，一个用于编程，都十分顺手，因此想学一下怎样用Python实现对Markdown语法的解析。在Github上搜索到一个项目：&lt;a href=&#34;https://github.com/lepture/mistune&#34;&gt;mistune&lt;/a&gt;。该项目使用纯Python实现了Markdown语法到HTML的解析，号称很快速，项目主页上有它与其他Python解析器的性能对比，我没有尝试，有兴趣的可以做些基准测试。本篇描述的是怎样利用mistune来实现对Markdown的解析，以下正是我学习和实践的过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第一步-初识:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;第一步：初识&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://mistune.readthedocs.org/en/latest/&#34;&gt;mistune项目文档&lt;/a&gt;对mistune的 &lt;em&gt;特性&lt;/em&gt; 、 &lt;em&gt;安装方法&lt;/em&gt; 、 &lt;em&gt;基本用法&lt;/em&gt; 和 &lt;em&gt;高级用法&lt;/em&gt; 等都有详细描述，在此不再赘述太多，使用前需要从&lt;a href=&#34;https://github.com/lepture/mistune&#34;&gt;主页&lt;/a&gt;下载&lt;code&gt;mistune.py&lt;/code&gt;文件，基本的使用方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#test.py
import mistune
mk = mistune.Markdown()
output = mk(&#39;I am using **mistune markdown parser**&#39;)
print(output)
#这段代码将会输出：&amp;lt;p&amp;gt;I am using &amp;lt;strong&amp;gt;mistune markdown parser&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，&lt;code&gt;test.py&lt;/code&gt;文件需要和&lt;code&gt;mistune.py&lt;/code&gt;文件在同一个目录下，否则Python不能正常&lt;code&gt;import mistune&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;第二步-根据源文件自动生成html文档:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;第二步：根据源文件自动生成HTML文档&lt;/h2&gt;

&lt;p&gt;在理解了第一步基本的使用方法后，我考虑自己写一个脚本调用&lt;code&gt;mistune&lt;/code&gt;模块，并通过Python文件操作读取源文件（&lt;code&gt;.md&lt;/code&gt;文件），并自动生成HTML文档（&lt;code&gt;preview.html&lt;/code&gt;），于是写了第一个简短的脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#md2html.py
import mistune
mk = mistune.Markdown()
with open(&#39;input.md&#39;,&#39;r&#39;) as f:
    s = f.read()
html = mk(s)
with open(&#39;preview.html&#39;,&#39;w&#39;) as f:
    f.write(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，只要&lt;code&gt;md2html.py&lt;/code&gt;和&lt;code&gt;mistune.py&lt;/code&gt;在同一目录下，该脚本就可以根据&lt;code&gt;input.md&lt;/code&gt;文件中Markdown语法书写的内容自动生成一个&lt;code&gt;preview.html&lt;/code&gt;文件，当然，前提是你在同一个目录下提前写好一个符合Markdown语法要求的&lt;code&gt;input.md&lt;/code&gt;文档。&lt;/p&gt;

&lt;p&gt;可以看出，以上脚本尽管简单地实现了目的，但是问题多多，且使用上不灵活，总结有以下几个缺点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;只能在&lt;code&gt;input.md&lt;/code&gt;文件里提前写好内容才能转成HTML文档，使用上不灵活；&lt;/li&gt;
&lt;li&gt;没有异常处理机制，脚本不健壮，假如没有提前创建&lt;code&gt;input.md&lt;/code&gt;，将报错：&lt;code&gt;FileNotFoundError&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;缺少提示符，用户界面不友好；&lt;/li&gt;
&lt;li&gt;不能自动调用浏览器预览生成的HTML文档，不直观。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;第三步-改进:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;第三步：改进&lt;/h2&gt;

&lt;p&gt;鉴于之前的脚本存在各种缺点，我对脚本进行了改进：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#python3 code
#md2html.py
import sys
import mistune
import webbrowser

#Count the number of command line parameters to find the path of md file
lenArgv = len(sys.argv)
if lenArgv == 1:
    url = input(&#39;Please input the path of md file:&amp;gt;&#39;)
elif lenArgv == 2:
    url = sys.argv[1]
else:
    url = input(&#39;You can only input a single path:&amp;gt;&#39;)

mk = mistune.Markdown()

#Exception handling:Avoid FileNotFoundError
while True:
    try:
        with open(url,&#39;r&#39;) as f:
            s = f.read()
        break
    except FileNotFoundError:
        url = input(&#39;Not Found,Input the path again:&amp;gt;&#39;)

html = mk(s)
with open(&#39;preview.html&#39;,&#39;w&#39;) as f:
    f.write(html)

#End of run,open preview.html automatically by default browser
print(&#39;preview.html is generated successfully!&#39;)
webbrowser.open(&#39;preview.html&#39;)
input()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改进版脚本说明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;import sys&lt;/code&gt;实现了对命令行参数的判断，可以用&lt;code&gt;python md2html.py &amp;lt;可缺省的源文件路径&amp;gt;&lt;/code&gt;进行调用，也可以直接运行&lt;code&gt;md2html.py&lt;/code&gt;文件后输入源文件路径进行调用，比之前的程序更加灵活；&lt;/li&gt;
&lt;li&gt;通过异常处理程序判断用户输入的路径是否正确，避免了程序的崩溃，增强了健壮性；&lt;/li&gt;
&lt;li&gt;每一步都引入了提示符，便于用户使用时的理解，界面更友好；&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;import webbrowser&lt;/code&gt;实现html文件生成后的自动预览，更加直观。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;写在后面:3b77fec813f87b3e259355ab06e2f0df&#34;&gt;写在后面&lt;/h2&gt;

&lt;p&gt;本文旨在提供一种学习思路，只是个人的想法，如有不正确的地方，还希望多多留言指正！另外Python编码风格的问题和写作方法的问题也请一起斧正，谢谢！使用中发现mistune这个模块对Markdown语法的解析并不完美，具体解析以下Markdown语法的时候即可发现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#test.md
*  unordered list
1. ordered list
1. other
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>